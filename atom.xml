<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Welcome</title>
  
  <subtitle>Dom&#39;know</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-07T07:00:48.677Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>dombro</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>动态规划-Floyed算法</title>
    <link href="http://yoursite.com/2017/12/06/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-Floyed%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2017/12/06/动态规划-Floyed算法/</id>
    <published>2017-12-06T12:00:23.000Z</published>
    <updated>2017-12-07T07:00:48.677Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Floyed-算法"><a href="#Floyed-算法" class="headerlink" title="Floyed 算法"></a>Floyed 算法</h1><p>做一个 Floyed算法 的笔记，往往在算法前面加上一个英文名字就感觉很高大上，有一种听着就hin难的感觉。我尽可能写的通俗易懂，方便以后我忘了这个算法的时候，能以最快的速度唤醒的记忆。</p><h2 id="what"><a href="#what" class="headerlink" title="what"></a>what</h2><p>Floyed算法 ,顾名思义一个叫 Floyed 的人发明的。这个算法具有很强的实际用用性，很多书上往往会用<strong>有向图这样的数据结构来讲解 Floyed算法</strong>，那我就反其道而行之吧！</p><h3 id="一个场景"><a href="#一个场景" class="headerlink" title="一个场景"></a>一个场景</h3><p>刚才说 Floyed算法 具有很强的应用性，那我就来举一个实际的例子将你带入。</p><p>  <img src="http://p0bl99g4r.bkt.clouddn.com/floyed.png" alt=""></p><p>如图，我们设定每两个地点之间的路线只能沿着箭头方向(生活中的单向车道)，而有地点之间甚至没有路线，<strong>如果你想知道任意两个地点之间的最短路线咋办</strong>？告诉你　Floyed 算法就帮你达到这个目的！瞅啥呢赶紧上车！</p><h3 id="场景格式化"><a href="#场景格式化" class="headerlink" title="场景格式化"></a>场景格式化</h3><p>还是刚才的场景中的图片，我们不妨按顺时针将每个地点编号，用数字表示他们的距离。比如体育馆到公园有2km的距离，我们把这句话变形为 : 1-&gt;2 = 2km 如此两两组合，我们不妨设一个二维数组(矩阵):<br>1）横坐标表示出发地，纵坐标表示目的地<br>2）<strong>坐标对应值就是出发地到目的地路线长度</strong>(注意这里加粗是因为所说的路线长度是考虑了方向的)<br>3）如果两地间没有路线我们将它的值看为无穷大(这是Floyed算法一个很重要的点)<br>4）如果两地是同一地点(横纵坐标相同)，那它所代表的路径长度就是 0</p><p><img src="http://p0bl99g4r.bkt.clouddn.com/mex.png" alt=""></p><p>如图，表格中第一列(横坐标)代表出发地，第一行代表目的地(纵坐标)。</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>我们通过一个距离矩阵描述了场景中地点间的路径，使它可以由程序语言描述出来，事实上我们想做的是利用这个矩阵描述出地点间最短路径！还是要回到最开始的问题<strong>如果你想知道任意两个地点之间的最短路线咋办</strong>？这里Floyed算法给出了一个很明确的思路：<strong>利用中间地点！</strong> 有点生活常识的人都知道，有时候并不是两个地点的直接距离是最近的，就像图片中，家-&gt;学校 的路线比 家-&gt;体育馆-&gt;公园-&gt;学校 路线要远。这里所说的 体育馆、公园 就是中间地点，<strong>如果 出发地-&gt;目的地 的路线长度比 出发地 -&gt;中间地点 -&gt;目的地 的路线长度长，那就选取后者作为两地节点的最短路线</strong>。这也就是为什么，我们规定没有路线的两个地点间距离是无穷大的原因，是一个很好理解的解决方案。我们最终希望希望矩阵变成这个样子</p><p><img src="http://p0bl99g4r.bkt.clouddn.com/max2.png" alt=""></p><h2 id="how"><a href="#how" class="headerlink" title="how"></a>how</h2><p>知道了 Floyed算法的原理，来看下如何实现。</p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>上面说 Floyed算法 的核心思想就是要找一个中间地点，来比较经过中间地点的路线和直达线路的距离。可是如果有多个中间地点的路线怎么办？下面按照上图中地点的编号来代表地点，如果要知道 4 -&gt; 3 的最短路线，我们就一定要知道 4 -&gt; 3 的全部路线。这里有 4 -&gt; 1 -&gt; 3，4 -&gt; 1 -&gt; 2 -&gt; 3，还有 4 -&gt; 3 直达 三条线路，经过很简单的比较我们找出 4 -&gt; 1 -&gt; 2 -&gt; 3 是最短的一条线路。经过这个例子，解决思路已经很清晰了：<strong>Floyed算法 在寻找任意两点最短路径时会将所有点作为中间点，依次比较 出发点-&gt;每个中间点的距离+每个中间点-&gt;目标点的距离 与 出发点-&gt;目标点的距离 大小，小的就是两点间最短距离</strong>，又由于设定没有路线的两点间距离为无穷大，所以我们总是可以通过中间点找到没有路线的两点间最短距。</p><h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><p>Floyed算法 的核心代码很简单，如果不考虑记录最短距离的路线，仅仅五行就够了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param disMatrix 记录两点间最短距离矩阵</span><br><span class="line"> * @param vertex    共有多少顶点(地点)</span><br><span class="line"> * @param pathMatrix 记录两点间最短路线的矩阵</span><br><span class="line"> */</span><br><span class="line">public static void floyed(int[][] disMatrix,int vertex,String[][] pathMatrix)&#123;</span><br><span class="line"></span><br><span class="line">   //这里的 K 表示中间顶点(元素)，即从第一个顶点作为中间顶点循环找到最短路径</span><br><span class="line">    for (int k = 1; k &lt;= vertex; k++)&#123;</span><br><span class="line">       for (int i = 1; i&lt;= vertex; i++)&#123;</span><br><span class="line">          for (int j = 1; j &lt;= vertex; j++)&#123;</span><br><span class="line">             //如果任何两个节点之间有一个中间节点使得两节点间的距离变得更短，那么就为其赋值为通过中间节点的路径和</span><br><span class="line">             //这里要注意的是还要判断起始和结束的节点到中间节点是不是通的，即 i-&gt;k 和 k-&gt;j 一定不能是无穷大</span><br><span class="line">             if (disMatrix[i][k] &lt; Integer.MAX_VALUE &amp;&amp; disMatrix[k][j] &lt; Integer.MAX_VALUE &amp;&amp; disMatrix[i][j] &gt; disMatrix[i][k] + disMatrix[k][j]) &#123;</span><br><span class="line">                 disMatrix[i][j] = disMatrix[i][k] + disMatrix[k][j];</span><br><span class="line"> //只记录需要中间顶点的路径，如果不需要则是直达</span><br><span class="line">                 pathMatrix[i][j] = &quot;最短路径是节点 &quot; + i + &quot; —&gt; 节点&quot; + k + &quot; —&gt; 节点&quot; + j;</span><br><span class="line">                &#125;    </span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>代码会将初始的距离矩阵 <code>int[][] disMatrix</code> 变为两点间最短距离矩阵。</p><h3 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">public class DynamicProgram &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 初始化距离矩阵</span><br><span class="line">     * @param disMatrix 距离矩阵</span><br><span class="line">     * @param vertex 图的顶点个数</span><br><span class="line">     * @param paths 一共有多少条路径</span><br><span class="line">     */</span><br><span class="line">     public static void initMatrix(int[][] disMatrix,int vertex,int paths)&#123;</span><br><span class="line"></span><br><span class="line">         /**</span><br><span class="line">          * 通过双重循环对距离矩阵初始化</span><br><span class="line">          */</span><br><span class="line">         for (int i = 1;i &lt;= vertex; i++)&#123;</span><br><span class="line">             for (int j = 1; j &lt;= vertex; j++)&#123;</span><br><span class="line">                 if (i==j)</span><br><span class="line">                     //自己到自己的距离记为 0</span><br><span class="line">                     disMatrix[i][j] = 0;</span><br><span class="line">                 else</span><br><span class="line">                     disMatrix[i][j] = Integer.MAX_VALUE;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         /**</span><br><span class="line">          *</span><br><span class="line">          * 为图中路径赋值</span><br><span class="line">          */</span><br><span class="line">         for (int i = 1; i &lt;= paths; i++)&#123;</span><br><span class="line">             System.out.println(&quot;请输入起始点:&quot;);</span><br><span class="line">             Scanner scanner = new Scanner(System.in);</span><br><span class="line">             int begin = scanner.nextInt();</span><br><span class="line">             System.out.println(&quot;请输入终止点:&quot;);</span><br><span class="line">             int end = scanner.nextInt();</span><br><span class="line">             System.out.println(&quot;请输入节点&quot;+begin+&quot;和节点&quot;+end+&quot;的距离:&quot;);</span><br><span class="line">             int distance = scanner.nextInt();</span><br><span class="line">             disMatrix[begin][end] = distance;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *</span><br><span class="line">     * @param disMatrix 记录两点间最短距离矩阵</span><br><span class="line">     * @param vertex    共有多少顶点点(地点)</span><br><span class="line">     * @param pathMatrix 记录两点间最短路线的矩阵</span><br><span class="line">     */</span><br><span class="line">    public static void floyed(int[][] disMatrix,int vertex,String[][] pathMatrix)&#123;</span><br><span class="line"></span><br><span class="line">        //这里的 K 表示中间顶点(元素)，即从第一个顶点作为中间顶点循环找到最短路径</span><br><span class="line">        for (int k = 1; k &lt;= vertex; k++)&#123;</span><br><span class="line">            for (int i = 1; i&lt;= vertex; i++)&#123;</span><br><span class="line">                for (int j = 1; j &lt;= vertex; j++)&#123;</span><br><span class="line">                    //如果任何两个节点之间有一个中间节点使得两节点间的距离变得更短，那么就为其赋值为通过中间节点的路径和</span><br><span class="line">                    //这里要注意的是还要判断起始和结束的节点到中间节点是不是通的，即 ik 和 kj 一定不能是无穷大</span><br><span class="line">                        if (disMatrix[i][k] &lt; Integer.MAX_VALUE &amp;&amp; disMatrix[k][j] &lt; Integer.MAX_VALUE &amp;&amp; disMatrix[i][j] &gt; disMatrix[i][k] + disMatrix[k][j]) &#123;</span><br><span class="line">                            disMatrix[i][j] = disMatrix[i][k] + disMatrix[k][j];</span><br><span class="line">                            pathMatrix[i][j] = &quot;最短路径是节点 &quot; + i + &quot; —&gt; 节点&quot; + k + &quot; —&gt; 节点&quot; + j;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void printDisMatrix(int[][] disMatrix,int vertex,String[][] pathMatrix)&#123;</span><br><span class="line"></span><br><span class="line">        for (int i = 1; i &lt;= vertex; i++)&#123;</span><br><span class="line">            for (int j = 1;j &lt;= vertex; j++)&#123;</span><br><span class="line">                if (i != j )&#123;</span><br><span class="line">                    String message = &quot;节点&quot;+i+&quot;到节点&quot;+j+&quot;的最短距离为&quot;+disMatrix[i][j]+&quot; &quot;;</span><br><span class="line">                    if (pathMatrix[i][j] != null)&#123;</span><br><span class="line">                        message += pathMatrix[i][j];</span><br><span class="line">                    &#125;else &#123;</span><br><span class="line">                        message += &quot;最短路径为直接到达&quot;;</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(message);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(&quot;请输入图中结点个数&quot;);</span><br><span class="line">        Scanner scanner = new Scanner(System.in);</span><br><span class="line">        int vertex = scanner.nextInt();</span><br><span class="line">        System.out.println(&quot;请输入图中路径的条数&quot;);</span><br><span class="line">        int paths = scanner.nextInt();</span><br><span class="line">        int disMatrix[][] = new int[10][10];</span><br><span class="line">        String[][] pathMatrix = new String[10][10];</span><br><span class="line">        initMatrix(disMatrix,vertex,paths);</span><br><span class="line">        floyed(disMatrix,vertex,pathMatrix);</span><br><span class="line">        printDisMatrix(disMatrix,vertex,pathMatrix);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">请输入图中结点个数</span><br><span class="line">4</span><br><span class="line">请输入图中路径的条数</span><br><span class="line">8</span><br><span class="line">请输入起始点:</span><br><span class="line">1</span><br><span class="line">请输入终止点:</span><br><span class="line">4</span><br><span class="line">请输入节点1和节点4的距离:</span><br><span class="line">4</span><br><span class="line">请输入起始点:</span><br><span class="line">1</span><br><span class="line">请输入终止点:</span><br><span class="line">3</span><br><span class="line">请输入节点1和节点3的距离:</span><br><span class="line">6</span><br><span class="line">请输入起始点:</span><br><span class="line">1</span><br><span class="line">请输入终止点:</span><br><span class="line">2</span><br><span class="line">...输入略...</span><br><span class="line"></span><br><span class="line">节点1到节点2的最短距离为2 最短路径为直接到达</span><br><span class="line">节点1到节点3的最短距离为5 最短路径是节点 1 —&gt; 节点2 —&gt; 节点3</span><br><span class="line">节点1到节点4的最短距离为4 最短路径为直接到达</span><br><span class="line">节点2到节点1的最短距离为9 最短路径是节点 2 —&gt; 节点4 —&gt; 节点1</span><br><span class="line">节点2到节点3的最短距离为3 最短路径为直接到达</span><br><span class="line">节点2到节点4的最短距离为4 最短路径是节点 2 —&gt; 节点3 —&gt; 节点4</span><br><span class="line">节点3到节点1的最短距离为6 最短路径是节点 3 —&gt; 节点4 —&gt; 节点1</span><br><span class="line">节点3到节点2的最短距离为8 最短路径是节点 3 —&gt; 节点4 —&gt; 节点2</span><br><span class="line">节点3到节点4的最短距离为1 最短路径为直接到达</span><br><span class="line">节点4到节点1的最短距离为5 最短路径为直接到达</span><br><span class="line">节点4到节点2的最短距离为7 最短路径是节点 4 —&gt; 节点1 —&gt; 节点2</span><br><span class="line">节点4到节点3的最短距离为10 最短路径是节点 4 —&gt; 节点2 —&gt; 节点3</span><br></pre></td></tr></table></figure><h2 id="about"><a href="#about" class="headerlink" title="about"></a>about</h2><p>总的来说 Floyed算法 是一个很好理解的算法，来分析一下。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>Floyed算法通过三重循环实现，时间复杂度可以看到是 O(N^3)。核心代码仅要五行，如果对时间复杂度要求不高，使用 Floyed算法求两点间最短距离 是一个很好的选择。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>Floyed算法 在使用上是有约束条件的，初始路径之间的距离不能出现负值，即如果如果把每个地点之间距离看成一个有向图，则该有向图顶点之间的权值不能为负。其实如果一个图中带有“负权回路”那么这个图则没有最短路径。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Floyed-算法&quot;&gt;&lt;a href=&quot;#Floyed-算法&quot; class=&quot;headerlink&quot; title=&quot;Floyed 算法&quot;&gt;&lt;/a&gt;Floyed 算法&lt;/h1&gt;&lt;p&gt;做一个 Floyed算法 的笔记，往往在算法前面加上一个英文名字就感觉很高大上，有一
      
    
    </summary>
    
    
      <category term="算法algorithm" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95algorithm/"/>
    
  </entry>
  
  <entry>
    <title>堆排序-HeapSort</title>
    <link href="http://yoursite.com/2017/12/04/%E5%A0%86%E6%8E%92%E5%BA%8F-HeapSort/"/>
    <id>http://yoursite.com/2017/12/04/堆排序-HeapSort/</id>
    <published>2017-12-04T01:43:02.000Z</published>
    <updated>2017-12-04T06:04:44.723Z</updated>
    
    <content type="html"><![CDATA[<h1 id="堆排序-HeapSort"><a href="#堆排序-HeapSort" class="headerlink" title="堆排序-HeapSort"></a>堆排序-HeapSort</h1><h2 id="what"><a href="#what" class="headerlink" title="what"></a>what</h2><p>首先我们来了解一些枯燥概念。这往往是必须的(TT)。</p><h3 id="堆-heap"><a href="#堆-heap" class="headerlink" title="堆 heap"></a>堆 heap</h3><ul><li>概念&amp;公式</li></ul><p>要了解堆排序，首先就要知道什么是堆！<strong>堆是顺序存储的完全二叉树</strong>(反正百度是这么说的)~ 翻译过来意思也就是堆实际就是逻辑上的完全二叉树，堆又分为 大根堆 和 小根堆 ，这个中文翻译很前卫… 分别有以下的特点</p><p>大根堆：每个节点的关键字(存储元素)都<strong>不小于</strong>其孩子节点的关键字,写成公式长这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ri &gt;= R2i+1 且 Ri &gt;= R2i+2 (i = 0,1,2...n)</span><br></pre></td></tr></table></figure><p>小根堆：每个节点的关键字(存储元素)都<strong>不大于</strong>其孩子节点的关键字     </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ri &lt;= R2i+1 且 Ri &lt;= R2i+2 (i = 0,1,2...n)</span><br></pre></td></tr></table></figure><p><em>公式中的 i 就是顺序存储结构中的位置，可以把它理解为数组中的索引</em>。</p><ul><li>理解&amp;总结</li></ul><p>你可能还是有点乱，<strong>简单一句话，堆就是把一个数组按照每个元素的索引，变成一颗逻辑上的完全二叉树，例如一个元素在数组中的索引是 i ，该元素的左孩子在数组中的索引就是 2i+1，右孩子在数组中的索引就是 2i+2，父节点的索引就是 (i-1)/2,而这颗完全二叉树的每个节点元素与其子节点元素之间还要满足一定的大小关系</strong>！</p><p><img src="http://p0bl99g4r.bkt.clouddn.com/sort.png" alt=""></p><p>如图，是一个整型无序数组变为大根堆后的逻辑形态，每个节点元素都比其子节点大。</p><h2 id="how"><a href="#how" class="headerlink" title="how"></a>how</h2><p>“堆排序” 这三个字你应该意识到，排序时一定会用到上面的堆，具体来说是大根堆。大根堆要如何实现排序？</p><h3 id="堆排序-heap-sort"><a href="#堆排序-heap-sort" class="headerlink" title="堆排序 heap-sort"></a>堆排序 heap-sort</h3><ul><li>大根堆的特点</li></ul><p>你可能没注意到<strong>大根堆的一大特点：根节点是最大的</strong>！ 也就是 索引为0 的元素是最大的。</p><ul><li>思路</li></ul><p>根据大根堆特点，可以总结一下思路。首先我们将一个数组 arrary[0…n] 调整为大根堆后，在交换 array[0] 和 array[n]。然后调整 array[0…n-1] 为大根堆，在交换 array[0] 和 array[n-1]，反复重复直到交换了 array[0] 和 array[1] 结束。 </p><ul><li>思路归纳</li></ul><p>根据上面的思路，可以归纳为两个操作：</p><p>1）根据初始数组构造初始堆(构建一个完全二叉树，保证所有父节点比孩子节点大，即大顶堆)。<br>2）每次交换第一个和最后一个元素，输出最后一个元素(此时为最大值)，把剩下的元素构造为大顶堆，直到输出完数组中最后一个元素后，这个数组已经从小到大排列了。</p><p><em>注意，这里说的输出最后一个元素的意思是，在下一次调整数组为大顶堆不包括该元素！</em></p><h3 id="初始化堆"><a href="#初始化堆" class="headerlink" title="初始化堆"></a>初始化堆</h3><p><strong>我们建造大根堆的过程就是要保证每个节点的子节点都比该节点小的过程，若节点的一个子节点比该节点大则节点与该节点交换，若两个子节点均比该节点大，则交换更大的那个节点</strong>。</p><ul><li><strong>错误思路</strong></li></ul><p>初始化堆这里我踩了一点坑，所以拿出来说一说。一开始我想从根节点(索引为0)开始递增构建大根堆</p><p><img src="http://p0bl99g4r.bkt.clouddn.com/sort2.png" alt=""></p><p>如图，从根节点开始循环递增会出现最大的元素无法到到达根节点的尴尬局面。这肯定不是一个大根堆。</p><ul><li><strong>正确思路</strong></li></ul><p><strong>从中间的节点(索引n/2)开始递减构建大根堆</strong>，可以有效的解决上面的问题</p><p><img src="http://p0bl99g4r.bkt.clouddn.com/sort3.png" alt=""></p><p>如图在从中间(索引)遍历完每个节点后均保证了其子节点元素都比该元素小，构建大顶堆成功。</p><h3 id="交换元素与调整"><a href="#交换元素与调整" class="headerlink" title="交换元素与调整"></a>交换元素与调整</h3><p>按照思路归纳中的步骤，初始化大根堆后，会交换根节点与最后一个元素，输出最后一个元素，可这时剩下元素组成的二叉树可能就不是大根堆了，所以还要将剩余元素变为大根堆，过程如下：</p><p><img src="http://p0bl99g4r.bkt.clouddn.com/sort4.png" alt=""></p><p>其实每次对剩余元素大根堆化的过程，与初始化大根堆是一样的，只不过传入的数组不包括上次交换的最后一个元素而已。到此，整个堆排序的过程也就介绍完了。</p><h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 使用变治法的堆排序</span><br><span class="line"> *</span><br><span class="line"> * 分两步走：</span><br><span class="line"> * 第一步：将一个数组变为一个大根堆</span><br><span class="line"> * 第二步: 将该大根堆的根节点与最后一个元素进行交换，再将最后最后一个元素输出(此时最后一个元素是最大的元素)</span><br><span class="line"> */</span><br><span class="line">public class SeparateAndConquer &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取一个节点的左孩子在数组中位置</span><br><span class="line">     * @param parent 该左孩子</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private static int getLeftChild(int parent)&#123;</span><br><span class="line">        return 2*parent+1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *</span><br><span class="line">      * @param array 目标数组</span><br><span class="line">     * @param parent 节点在数组中的位置</span><br><span class="line">     * @param length 数组规模</span><br><span class="line">     */</span><br><span class="line">   public static &lt;AnyType extends Comparable&lt;? super AnyType&gt;&gt; void buildHeap(AnyType[] array, int parent, int length)&#123;</span><br><span class="line"></span><br><span class="line">       //保存当前父节点</span><br><span class="line">        AnyType temp = array[parent];</span><br><span class="line">       //先获得左孩子位置</span><br><span class="line">       int child = getLeftChild(parent);</span><br><span class="line"></span><br><span class="line">       while (child &lt; length)&#123;</span><br><span class="line">            //如果存在右孩子，并且右孩子值大于左孩子值，则选取右孩子节点</span><br><span class="line">            if (child + 1 &lt; length &amp;&amp; array[child].compareTo(array[child+1]) &lt; 0)&#123;</span><br><span class="line">                child++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //如果父亲结点值大于孩子节点的值，则直接结束</span><br><span class="line">            if (temp.compareTo(array[child]) &gt; 0)&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                //否则选取孩子节点的值赋给父节点</span><br><span class="line">                array[parent] = array[child];</span><br><span class="line">                //选取孩子节点的左孩子节点，继续向下筛选</span><br><span class="line">                parent = child;</span><br><span class="line">                child = 2 * child + 1;</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line"> </span><br><span class="line">       array[parent] = temp;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   public static &lt;AnyType extends Comparable&lt;? super AnyType&gt;&gt; void heapSort(AnyType[] array)&#123;</span><br><span class="line">        //首先将数组初始化为堆</span><br><span class="line">       for (int i = array.length/2; i &gt;= 0; i--)&#123;</span><br><span class="line">           buildHeap(array,i,array.length);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       //从最后一个元素开始循环(进行n-1次循环)，完成排序</span><br><span class="line">       for (int i = array.length - 1; i &gt; 0; i--)&#123;</span><br><span class="line">           //将最后一个元素与第一个元素交换</span><br><span class="line">           AnyType temp = array[i];</span><br><span class="line">           array[i] = array[0];</span><br><span class="line">           array[0] = temp;</span><br><span class="line">           //每次交换后，还要剩下的将最小的元素放回到最后一个位置，最大的元素放回到第一个位置</span><br><span class="line">           buildHeap(array,0,i);</span><br><span class="line">           System.out.format(&quot;第 %d 趟: \t&quot;, array.length - i);</span><br><span class="line">           printArray(array);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public static &lt;AnyType extends Comparable&lt;? super AnyType&gt;&gt; void printArray(AnyType[] array)&#123;</span><br><span class="line">       for (int i = 0; i &lt; array.length;i++)&#123;</span><br><span class="line">           System.out.print(array[i]+&quot; &quot;);</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">       Integer[] array = &#123;3,5,4,36,21&#125;;</span><br><span class="line">       System.out.println(&quot;使用堆排序前&quot;);</span><br><span class="line">       SeparateAndConquer.printArray(array);</span><br><span class="line">       SeparateAndConquer.heapSort(array);</span><br><span class="line">       System.out.println(&quot;使用堆排序后&quot;);</span><br><span class="line">       SeparateAndConquer.printArray(array);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">使用堆排序前</span><br><span class="line">3 5 4 36 21 </span><br><span class="line">第 1 趟: 21 5 4 3 36 </span><br><span class="line">第 2 趟: 5 3 4 21 36 </span><br><span class="line">第 3 趟: 4 3 5 21 36 </span><br><span class="line">第 4 趟: 3 4 5 21 36 </span><br><span class="line">使用堆排序后</span><br><span class="line">3 4 5 21 36</span><br></pre></td></tr></table></figure><h2 id="about"><a href="#about" class="headerlink" title="about"></a>about</h2><p>说完了怎么实现，再来分析一下堆排序算法</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>经验表明，<strong>堆排序是个十分稳定的算法</strong>。堆排序给出了迄今为止最佳的大O运行时间。在第一步初始化堆阶段时间复杂度为 O(N)，第二步在执行 N 次交换并调整大根堆所用时间复杂度为 O(NlogN)，综合下来时间复杂度为 O(N)。</p><h3 id="算法稳定性"><a href="#算法稳定性" class="headerlink" title="算法稳定性"></a>算法稳定性</h3><p>堆排序是一种不稳定的排序方法。<br>因为在堆的调整过程中，关键字进行比较和交换所走的是该结点到叶子结点的一条路径，因此对于相同的关键字就可能出现排在后面的关键字被交换到前面来的情况。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;堆排序-HeapSort&quot;&gt;&lt;a href=&quot;#堆排序-HeapSort&quot; class=&quot;headerlink&quot; title=&quot;堆排序-HeapSort&quot;&gt;&lt;/a&gt;堆排序-HeapSort&lt;/h1&gt;&lt;h2 id=&quot;what&quot;&gt;&lt;a href=&quot;#what&quot; cla
      
    
    </summary>
    
    
      <category term="算法algorithm" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95algorithm/"/>
    
  </entry>
  
  <entry>
    <title>世界你好</title>
    <link href="http://yoursite.com/2017/12/01/hello-world/"/>
    <id>http://yoursite.com/2017/12/01/hello-world/</id>
    <published>2017-12-01T07:35:59.657Z</published>
    <updated>2017-12-02T11:31:34.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><p>程序员的职业病？尝试一个新事物就要写个”Hello World”嘚瑟一下。</p><h1 id="That’s-Fun"><a href="#That’s-Fun" class="headerlink" title="That’s Fun"></a>That’s Fun</h1><p>第一次尝试用 github + hexo 搭建自己的博客，简直不要太爽！打今儿起也不再死板的用 github 记笔记了，也潮流一次！感叹互联网技术为我们带来的便捷，一个前端小白都可以搭建自己喜好风格的博客。用 hexo 写博客是一件很享受和放松的事情，最重要还可以装装B…hhhh</p><h1 id="To-Me"><a href="#To-Me" class="headerlink" title="To Me"></a>To Me</h1><p>最后送给自己一句话：<strong>坚持会让所有的幸福如期而至</strong>！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello World&quot;&gt;&lt;/a&gt;Hello World&lt;/h1&gt;&lt;p&gt;程序员的职业病？尝试一个新事物就要写个”Hello World”嘚瑟
      
    
    </summary>
    
    
      <category term="hello world" scheme="http://yoursite.com/tags/hello-world/"/>
    
  </entry>
  
</feed>
