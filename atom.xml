<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Welcome</title>
  
  <subtitle>Dom&#39;know</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-04T06:04:44.723Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>dombro</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>堆排序-HeapSort</title>
    <link href="http://yoursite.com/2017/12/04/%E5%A0%86%E6%8E%92%E5%BA%8F-HeapSort/"/>
    <id>http://yoursite.com/2017/12/04/堆排序-HeapSort/</id>
    <published>2017-12-04T01:43:02.000Z</published>
    <updated>2017-12-04T06:04:44.723Z</updated>
    
    <content type="html"><![CDATA[<h1 id="堆排序-HeapSort"><a href="#堆排序-HeapSort" class="headerlink" title="堆排序-HeapSort"></a>堆排序-HeapSort</h1><h2 id="what"><a href="#what" class="headerlink" title="what"></a>what</h2><p>首先我们来了解一些枯燥概念。这往往是必须的(TT)。</p><h3 id="堆-heap"><a href="#堆-heap" class="headerlink" title="堆 heap"></a>堆 heap</h3><ul><li>概念&amp;公式</li></ul><p>要了解堆排序，首先就要知道什么是堆！<strong>堆是顺序存储的完全二叉树</strong>(反正百度是这么说的)~ 翻译过来意思也就是堆实际就是逻辑上的完全二叉树，堆又分为 大根堆 和 小根堆 ，这个中文翻译很前卫… 分别有以下的特点</p><p>大根堆：每个节点的关键字(存储元素)都<strong>不小于</strong>其孩子节点的关键字,写成公式长这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ri &gt;= R2i+1 且 Ri &gt;= R2i+2 (i = 0,1,2...n)</span><br></pre></td></tr></table></figure><p>小根堆：每个节点的关键字(存储元素)都<strong>不大于</strong>其孩子节点的关键字     </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ri &lt;= R2i+1 且 Ri &lt;= R2i+2 (i = 0,1,2...n)</span><br></pre></td></tr></table></figure><p><em>公式中的 i 就是顺序存储结构中的位置，可以把它理解为数组中的索引</em>。</p><ul><li>理解&amp;总结</li></ul><p>你可能还是有点乱，<strong>简单一句话，堆就是把一个数组按照每个元素的索引，变成一颗逻辑上的完全二叉树，例如一个元素在数组中的索引是 i ，该元素的左孩子在数组中的索引就是 2i+1，右孩子在数组中的索引就是 2i+2，父节点的索引就是 (i-1)/2,而这颗完全二叉树的每个节点元素与其子节点元素之间还要满足一定的大小关系</strong>！</p><p><img src="http://p0bl99g4r.bkt.clouddn.com/sort.png" alt=""></p><p>如图，是一个整型无序数组变为大根堆后的逻辑形态，每个节点元素都比其子节点大。</p><h2 id="how"><a href="#how" class="headerlink" title="how"></a>how</h2><p>“堆排序” 这三个字你应该意识到，排序时一定会用到上面的堆，具体来说是大根堆。大根堆要如何实现排序？</p><h3 id="堆排序-heap-sort"><a href="#堆排序-heap-sort" class="headerlink" title="堆排序 heap-sort"></a>堆排序 heap-sort</h3><ul><li>大根堆的特点</li></ul><p>你可能没注意到<strong>大根堆的一大特点：根节点是最大的</strong>！ 也就是 索引为0 的元素是最大的。</p><ul><li>思路</li></ul><p>根据大根堆特点，可以总结一下思路。首先我们将一个数组 arrary[0…n] 调整为大根堆后，在交换 array[0] 和 array[n]。然后调整 array[0…n-1] 为大根堆，在交换 array[0] 和 array[n-1]，反复重复直到交换了 array[0] 和 array[1] 结束。 </p><ul><li>思路归纳</li></ul><p>根据上面的思路，可以归纳为两个操作：</p><p>1）根据初始数组构造初始堆(构建一个完全二叉树，保证所有父节点比孩子节点大，即大顶堆)。<br>2）每次交换第一个和最后一个元素，输出最后一个元素(此时为最大值)，把剩下的元素构造为大顶堆，直到输出完数组中最后一个元素后，这个数组已经从小到大排列了。</p><p><em>注意，这里说的输出最后一个元素的意思是，在下一次调整数组为大顶堆不包括该元素！</em></p><h3 id="初始化堆"><a href="#初始化堆" class="headerlink" title="初始化堆"></a>初始化堆</h3><p><strong>我们建造大根堆的过程就是要保证每个节点的子节点都比该节点小的过程，若节点的一个子节点比该节点大则节点与该节点交换，若两个子节点均比该节点大，则交换更大的那个节点</strong>。</p><ul><li><strong>错误思路</strong></li></ul><p>初始化堆这里我踩了一点坑，所以拿出来说一说。一开始我想从根节点(索引为0)开始递增构建大根堆</p><p><img src="http://p0bl99g4r.bkt.clouddn.com/sort2.png" alt=""></p><p>如图，从根节点开始循环递增会出现最大的元素无法到到达根节点的尴尬局面。这肯定不是一个大根堆。</p><ul><li><strong>正确思路</strong></li></ul><p><strong>从中间的节点(索引n/2)开始递减构建大根堆</strong>，可以有效的解决上面的问题</p><p><img src="http://p0bl99g4r.bkt.clouddn.com/sort3.png" alt=""></p><p>如图在从中间(索引)遍历完每个节点后均保证了其子节点元素都比该元素小，构建大顶堆成功。</p><h3 id="交换元素与调整"><a href="#交换元素与调整" class="headerlink" title="交换元素与调整"></a>交换元素与调整</h3><p>按照思路归纳中的步骤，初始化大根堆后，会交换根节点与最后一个元素，输出最后一个元素，可这时剩下元素组成的二叉树可能就不是大根堆了，所以还要将剩余元素变为大根堆，过程如下：</p><p><img src="http://p0bl99g4r.bkt.clouddn.com/sort4.png" alt=""></p><p>其实每次对剩余元素大根堆化的过程，与初始化大根堆是一样的，只不过传入的数组不包括上次交换的最后一个元素而已。到此，整个堆排序的过程也就介绍完了。</p><h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 使用变治法的堆排序</span><br><span class="line"> *</span><br><span class="line"> * 分两步走：</span><br><span class="line"> * 第一步：将一个数组变为一个大根堆</span><br><span class="line"> * 第二步: 将该大根堆的根节点与最后一个元素进行交换，再将最后最后一个元素输出(此时最后一个元素是最大的元素)</span><br><span class="line"> */</span><br><span class="line">public class SeparateAndConquer &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取一个节点的左孩子在数组中位置</span><br><span class="line">     * @param parent 该左孩子</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private static int getLeftChild(int parent)&#123;</span><br><span class="line">        return 2*parent+1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *</span><br><span class="line">      * @param array 目标数组</span><br><span class="line">     * @param parent 节点在数组中的位置</span><br><span class="line">     * @param length 数组规模</span><br><span class="line">     */</span><br><span class="line">   public static &lt;AnyType extends Comparable&lt;? super AnyType&gt;&gt; void buildHeap(AnyType[] array, int parent, int length)&#123;</span><br><span class="line"></span><br><span class="line">       //保存当前父节点</span><br><span class="line">        AnyType temp = array[parent];</span><br><span class="line">       //先获得左孩子位置</span><br><span class="line">       int child = getLeftChild(parent);</span><br><span class="line"></span><br><span class="line">       while (child &lt; length)&#123;</span><br><span class="line">            //如果存在右孩子，并且右孩子值大于左孩子值，则选取右孩子节点</span><br><span class="line">            if (child + 1 &lt; length &amp;&amp; array[child].compareTo(array[child+1]) &lt; 0)&#123;</span><br><span class="line">                child++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //如果父亲结点值大于孩子节点的值，则直接结束</span><br><span class="line">            if (temp.compareTo(array[child]) &gt; 0)&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                //否则选取孩子节点的值赋给父节点</span><br><span class="line">                array[parent] = array[child];</span><br><span class="line">                //选取孩子节点的左孩子节点，继续向下筛选</span><br><span class="line">                parent = child;</span><br><span class="line">                child = 2 * child + 1;</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line"> </span><br><span class="line">       array[parent] = temp;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   public static &lt;AnyType extends Comparable&lt;? super AnyType&gt;&gt; void heapSort(AnyType[] array)&#123;</span><br><span class="line">        //首先将数组初始化为堆</span><br><span class="line">       for (int i = array.length/2; i &gt;= 0; i--)&#123;</span><br><span class="line">           buildHeap(array,i,array.length);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       //从最后一个元素开始循环(进行n-1次循环)，完成排序</span><br><span class="line">       for (int i = array.length - 1; i &gt; 0; i--)&#123;</span><br><span class="line">           //将最后一个元素与第一个元素交换</span><br><span class="line">           AnyType temp = array[i];</span><br><span class="line">           array[i] = array[0];</span><br><span class="line">           array[0] = temp;</span><br><span class="line">           //每次交换后，还要剩下的将最小的元素放回到最后一个位置，最大的元素放回到第一个位置</span><br><span class="line">           buildHeap(array,0,i);</span><br><span class="line">           System.out.format(&quot;第 %d 趟: \t&quot;, array.length - i);</span><br><span class="line">           printArray(array);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public static &lt;AnyType extends Comparable&lt;? super AnyType&gt;&gt; void printArray(AnyType[] array)&#123;</span><br><span class="line">       for (int i = 0; i &lt; array.length;i++)&#123;</span><br><span class="line">           System.out.print(array[i]+&quot; &quot;);</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">       Integer[] array = &#123;3,5,4,36,21&#125;;</span><br><span class="line">       System.out.println(&quot;使用堆排序前&quot;);</span><br><span class="line">       SeparateAndConquer.printArray(array);</span><br><span class="line">       SeparateAndConquer.heapSort(array);</span><br><span class="line">       System.out.println(&quot;使用堆排序后&quot;);</span><br><span class="line">       SeparateAndConquer.printArray(array);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">使用堆排序前</span><br><span class="line">3 5 4 36 21 </span><br><span class="line">第 1 趟: 21 5 4 3 36 </span><br><span class="line">第 2 趟: 5 3 4 21 36 </span><br><span class="line">第 3 趟: 4 3 5 21 36 </span><br><span class="line">第 4 趟: 3 4 5 21 36 </span><br><span class="line">使用堆排序后</span><br><span class="line">3 4 5 21 36</span><br></pre></td></tr></table></figure><h2 id="about"><a href="#about" class="headerlink" title="about"></a>about</h2><p>说完了怎么实现，再来分析一下堆排序算法</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>经验表明，<strong>堆排序是个十分稳定的算法</strong>。堆排序给出了迄今为止最佳的大O运行时间。在第一步初始化堆阶段时间复杂度为 O(N)，第二步在执行 N 次交换并调整大根堆所用时间复杂度为 O(NlogN)，综合下来时间复杂度为 O(N)。</p><h3 id="算法稳定性"><a href="#算法稳定性" class="headerlink" title="算法稳定性"></a>算法稳定性</h3><p>堆排序是一种不稳定的排序方法。<br>因为在堆的调整过程中，关键字进行比较和交换所走的是该结点到叶子结点的一条路径，因此对于相同的关键字就可能出现排在后面的关键字被交换到前面来的情况。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;堆排序-HeapSort&quot;&gt;&lt;a href=&quot;#堆排序-HeapSort&quot; class=&quot;headerlink&quot; title=&quot;堆排序-HeapSort&quot;&gt;&lt;/a&gt;堆排序-HeapSort&lt;/h1&gt;&lt;h2 id=&quot;what&quot;&gt;&lt;a href=&quot;#what&quot; cla
      
    
    </summary>
    
    
      <category term="算法algorithm" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95algorithm/"/>
    
  </entry>
  
  <entry>
    <title>世界你好</title>
    <link href="http://yoursite.com/2017/12/01/hello-world/"/>
    <id>http://yoursite.com/2017/12/01/hello-world/</id>
    <published>2017-12-01T07:35:59.657Z</published>
    <updated>2017-12-02T11:31:34.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><p>程序员的职业病？尝试一个新事物就要写个”Hello World”嘚瑟一下。</p><h1 id="That’s-Fun"><a href="#That’s-Fun" class="headerlink" title="That’s Fun"></a>That’s Fun</h1><p>第一次尝试用 github + hexo 搭建自己的博客，简直不要太爽！打今儿起也不再死板的用 github 记笔记了，也潮流一次！感叹互联网技术为我们带来的便捷，一个前端小白都可以搭建自己喜好风格的博客。用 hexo 写博客是一件很享受和放松的事情，最重要还可以装装B…hhhh</p><h1 id="To-Me"><a href="#To-Me" class="headerlink" title="To Me"></a>To Me</h1><p>最后送给自己一句话：<strong>坚持会让所有的幸福如期而至</strong>！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello World&quot;&gt;&lt;/a&gt;Hello World&lt;/h1&gt;&lt;p&gt;程序员的职业病？尝试一个新事物就要写个”Hello World”嘚瑟
      
    
    </summary>
    
    
      <category term="hello world" scheme="http://yoursite.com/tags/hello-world/"/>
    
  </entry>
  
</feed>
